#!/usr/bin/env python3

import json
import asyncio
import argparse
import sys

async def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--repo", action="store")
    parser.add_argument("--github-env", action="store")
    parser.add_argument("--env", action="store")
    args, remaining_args = (
        parser.parse_known_args()
    )

    # There really shouldn't be any leftover args
    if (remaining_args or len(remaining_args) > 0 or
            not args.env or not args.repo):
        parser.print_help()
        exit(1)

    env_file = f".env.{args.env}"
    env_name = args.github_env if args.github_env else args.env
    repo = args.repo

    dotenvx = await (asyncio.
        create_subprocess_exec("dotenvx", "get", "-f", env_file,
            stdout=asyncio.subprocess.PIPE,
            stderr=sys.stderr))

    stdout, _ = await dotenvx.communicate()
    if dotenvx.returncode != 0:
        print("Error getting secrets from dotenvx")
        sys.exit(1)

    secrets = json.loads(stdout)
    await asyncio.gather(*[
        asyncio.create_subprocess_exec(
            "gh", "secret", "set", key,
            "--repo", repo, "--env", env_name,
            "--body", value,
            stdout=sys.stdout,
            stderr=sys.stderr
        ) for key, value in secrets.items()
    ])

if __name__ == "__main__":
    asyncio.run(main())
